// Package event provides bindings for JavaScript Event objects.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/Event
package event

import (
	"time"

	"github.com/flimzy/js/dom"
	"github.com/flimzy/js/number"
	"github.com/flimzy/js/window"
	"github.com/gopherjs/gopherjs/js"
)

var startTime = time.Now()

func init() {
	if w := window.Window(); w != nil {
		startTime = w.Performance().Timing().NavigationStart()
	}
}

// Event is a simple wrapper for a JavaScript event object
type Event struct {
	js.Object
}

// EventInit represents the available options when creating a new event.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/Event#Values
type EventInit struct {
	Bubbles    bool `js:"bubbles"`
	Cancelable bool `js:"cancelable"`
}

// New creates a new Event.
func New(typeArg string, eventInit EventInit) *Event {
	event := js.Global.Get("Event").New(typeArg, eventInit)
	return &Event{*event}
}

// Bubbles returns a boolean indicating whether the given event bubbles up
// through the DOM or not.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles
func (e *Event) Bubbles() bool {
	return e.Get("bubbles").Bool()
}

// Cancelable returns a boolean indicating whether the event is cancelable or
// not.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable
func (e *Event) Cancelable() bool {
	return e.Get("cancelable").Bool()
}

// CurrentTarget returns the current target for the event, as the event
// traverses the DOM. It always refers to the element the event handler has
// been attached to as opposed to event.target which identifies the element
// on which the event occurred.
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget
func (e *Event) CurrentTarget() *dom.Element {
	return &dom.Element{*e.Get("currentTarget")}
}

// DefaultPrevented returns a boolean indicating whether or not
// PreventDefault() was called on the event.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented
func (e *Event) DefaultPrevented() bool {
	return e.Get("defaultPrevented").Bool()
}

type Phase int

const (
	None Phase = iota
	CapturingPhase
	AtTarget
	BubblingPhase
)

// EventPhase returns a constant indicating which phase of the event flow is
// currently being evaluated.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase
func (e *Event) EventPhase() Phase {
	return Phase(e.Get("eventPhase").Int())
}

// IsTrusted returns a boolean that is true when the event was generated by a
// user action, and false when the event was created or modified by a script
// or dispatched via dispatchEvent.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
func (e *Event) IsTrusted() bool {
	return e.Get("isTrusted").Bool()
}

// Target returns a reference to the object that dispatched the event. It is
// different from CurrentTarget() when the event handler is called during the
// bubbling or capturing phase of the event.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/target
func (e *Event) Target() *dom.Element {
	return &dom.Element{*e.Get("target")}
}

// hasHiResTimestamp returns true if the browser supports Hi-rest timestamps
// stored as DOMHighResTimeStamp objects, as is done in Chrome >= 49, and
// presumably other upcoming browsers.
func (e *Event) hasHiResTimestamp() bool {
	if !number.IsInteger(e.Get("timeStamp")) {
		// Non-integers must be HiRes timestamps
		return true
	}
	// TODO: It is (theoretically) possible (I think), that a HiRes timestamp would
	// occasionally be an integer... therefore some additional checking may be called
	// for here.
	return false
}

// Time returns a time.Time value representing the time the event fired. For
// browsers that store event.timeStamp as a DOMHighResTimeStamp object, this
// value is calculated as the sum of the event's timeStamp value and
// window.performance.timings.navigationStart
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
func (e *Event) Time() time.Time {
	if e.hasHiResTimestamp() {
		return startTime.Add(e.Timestamp())
	}
	epochTime := e.Get("timeStamp").Int64()
	return time.Unix(epochTime/1000, (epochTime%1000)*1000000)
}

// Timestamp returns time.Duration event, representing a monotonic timestamp
// (not related to the computer clock) when the event fired. For browsers
// which don't store the event timeStamp as a DOMHighResTimeStamp object, the
// value returned is the difference between window.performance.timings.navigationStart
// (or if not available, the time the event module's init() function was called loaded)
// and the event's timeStamp value.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
func (e *Event) Timestamp() time.Duration {
	if e.hasHiResTimestamp() {
		// Chrome >= 49 uses monotonic timestamps instead of epoch time
		return time.Duration(e.Get("timeStamp").Int64()*1000) * time.Microsecond
	}
	return e.Time().Sub(startTime)
}

// Type returns a string containing the type of event. It is set when the
// event is constructed and is the name commonly used to refer to the specific
// event.
//
// See https://developer.mozilla.org/en-US/docs/Web/API/Event/type
func (e *Event) Type() string {
	return e.Get("type").String()
}
